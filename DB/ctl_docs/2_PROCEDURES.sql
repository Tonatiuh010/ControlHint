/*######################### INSERTS PROCEDURES TO DOCS ##############################*/
USE CTL_DOCS;

DROP PROCEDURE IF EXISTS CONTROL_ACCESS_APPROVER_INSERT;
DELIMITER //
CREATE PROCEDURE CONTROL_ACCESS_APPROVER_INSERT (
	IN 	IN_APPROVER INT,
    IN  IN_FULLNAME VARCHAR(100),
    IN	IN_POSITION INT,
	IN 	IN_DEPTO INT,
	
    IN IN_USER VARCHAR(100),
    OUT OUT_MSG VARCHAR(450)
)
BEGIN
	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @SQL_STATUS = RETURNED_SQLSTATE, @ERR_MSG = MESSAGE_TEXT;
        SET OUT_MSG := CONCAT('ERROR -> ON [ACCESS_CONTROL_APPROVER_INSERT] ', @SQL_STATUS, ' - ', @ERR_MSG);
	END;
    
    SET OUT_MSG = 'OK';

	UPDATE APPROVER SET
	APPROVER_ID = IN_APPROVER,
	FULL_NAME = IN_FULLNAME,
	POSITION_ID = IN_POSITION,
	DEPTO_ID = IN_DEPTO,
    
    STATUS = 'ENABLED',
	UPDATED_ON = NOW(),
	UPDATED_BY = IN_USER
    
    WHERE
		APPROVER_ID = IN_APPROVER;
	
    IF ROW_COUNT() = 0 THEN
		INSERT INTO APPROVER (APPROVER_ID, FULL_NAME, POSITION_ID, DEPTO_ID, CREATED_BY)
        VALUES (IN_APPROVER, IN_FULLNAME, IN_POSITION, IN_DEPTO, IN_USER);
	END IF;
END;
//DELIMITER ;

-- SET @MSG = "";
-- CALL CONTROL_ACCESS_APPROVER_INSERT(1,"HERNANDEZ JESUS", 1, 1, "MIPOYA", @OUT_MSG);
-- SELECT * FROM APPROVER;

DROP PROCEDURE IF EXISTS CONTROL_ACCESS_DOCAPPROVER_INSERT;
DELIMITER //
CREATE PROCEDURE CONTROL_ACCESS_DOCAPPROVER_INSERT(
	IN IN_DOCAPPROVER INT,
    IN IN_DOCFLOW INT,
    IN IN_APPROVER INT,
    IN IN_SEQUENCE VARCHAR(100),
    IN IN_NAME VARCHAR(100),
    IN IN_ACTION INT,
    
    IN IN_USER VARCHAR(100),
    OUT OUT_MSG VARCHAR(500)
)
BEGIN
	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @SQL_STATUS = RETURNED_SQLSTATE, @ERR_MSG = MESSAGE_TEXT;
        SET OUT_MSG := CONCAT('ERROR -> ON [CONTROL_ACCESS_DOCAPPROVER_INSERT] ', @SQL_STATUS, ' - ', @ERR_MSG);
	END;
    
    SET OUT_MSG = 'OK';
    
    UPDATE DOC_APPROVER SET
    DOC_APPROVER_ID = IN_DOCAPPROVER,
    DOC_FLOW_ID = IN_DOCFLOW,
    APPROVER_ID = IN_APPROVER,
    SEQUENCE = IN_SEQUENCE,
    NAME = IN_NAME,
    ACTION = IN_ACTION,
    
    STATUS = 'ENABLED',
	UPDATED_ON = NOW(),
	UPDATED_BY = IN_USER
    
    WHERE
		DOC_APPROVER_ID = IN_DOCAPPROVER;
	
    IF ROW_COUNT() = 0 THEN
		INSERT INTO DOC_APPROVER (DOC_APPROVER_ID, DOC_FLOW_ID, APPROVER_ID, SEQUENCE, NAME, ACTION, CREATED_BY)
        VALUES (IN_DOCAPPROVER, IN_DOCFLOW, IN_APPROVER, IN_SEQUENCE, IN_NAME, IN_ACTION, IN_USER);
	END IF;
END;
//DELIMITER ;

-- CALL CONTROL_ACCESS_DOCAPPROVER_INSERT (1,1,1,"NOSE", "SEPA", 1, "MIPOYA", @OUT_MSG);
-- SELECT * FROM DOC_APPROVER;

DROP PROCEDURE IF EXISTS CONTROL_ACCESS_DOC_FILE_INSERT;
DELIMITER //
CREATE PROCEDURE CONTROL_ACCESS_DOC_FILE_INSERT (
	IN IN_FILE_ID INT,
    IN IN_DOCUMENT_ID INT,
    IN IN_DOC_IMG VARCHAR(100),
	
    IN IN_USER VARCHAR(100),
    OUT OUT_MSG VARCHAR(500)
)
BEGIN
	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @SQL_STATUS = RETURNED_SQLSTATE, @ERR_MSG = MESSAGE_TEXT;
        SET OUT_MSG := CONCAT('ERROR -> ON [CONTROL_ACCESS_DOCAPPROVER_INSERT] ', @SQL_STATUS, ' - ', @ERR_MSG);
	END;
    
    SET OUT_MSG = 'OK';
    
    UPDATE DOC_FILE SET
    FILE_ID = IN_FILE_ID,
    DOCUMENT_ID = IN_DOCUMENT_ID,
    DOC_IMG = IN_DOC_IMG,
    
    STATUS = 'ENABLED',
	UPDATED_ON = NOW(),
	UPDATED_BY = IN_USER
    
    WHERE 
		FILE_ID = IN_FILE_ID;
        
        IF ROW_COUNT() = 0 THEN
		INSERT INTO DOC_FILE (FILE_ID, DOCUMENT_ID, DOC_IMG, CREATED_BY)
        VALUES (IN_FILE_ID, IN_DOCUMENT_ID, IN_DOC_IMG, IN_USER);
	END IF;
END ;
// DELIMITER ;

-- CALL CONTROL_ACCESS_DOC_FILE_INSERT (1, 1, "IMAGENRAMDOMBIENLARGAAQUI","USER1", @OUT_MSG);
-- SELECT * FROM DOC_FILE;

DROP PROCEDURE IF EXISTS CONTROL_ACCESS_DOC_FLOW_INSERT;
DELIMITER //
CREATE PROCEDURE CONTROL_ACCESS_DOC_FLOW_INSERT(
	IN IN_DOC_FLOW_ID INT,
    IN IN_TYPE_ID INT,
    IN IN_KEY1 VARCHAR(100),
    IN IN_KEY2 VARCHAR(100),
    IN IN_KEY3 VARCHAR(100),
    IN IN_KEY4 VARCHAR(100),
    
    IN IN_USER VARCHAR(100),
    OUT OUT_MSG VARCHAR(500)
)
BEGIN
	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @SQL_STATUS = RETURNED_SQLSTATE, @ERR_MSG = MESSAGE_TEXT;
        SET OUT_MSG := CONCAT('ERROR -> ON [CONTROL_ACCESS_DOCAPPROVER_INSERT] ', @SQL_STATUS, ' - ', @ERR_MSG);
	END;
    
    SET OUT_MSG = "OK";
    
    UPDATE DOC_FLOW SET
    DOC_FLOW_ID = IN_DOC_FLOW_I,
    TYPE_ID = IN_TYPE_ID,
    KEY1 = IN_KEY1,
    KEY2 = IN_KEY2,
    KEY3 = IN_KEY3,
    KEY4 = IN_KEY4,
    
    STATUS = 'ENABLED',
	UPDATED_ON = NOW(),
	UPDATED_BY = IN_USER
    
    WHERE
		DOC_FLOW_ID = IN_DOC_FLOW_ID;
        
	IF ROW_COUNT() = 0 THEN
		INSERT INTO DOC_FLOW (DOC_FLOW_ID, TYPE_ID, KEY1, KEY2, KEY3, KEY4, CREATED_BY)
		VALUES (IN_DOC_FLOW_ID, IN_TYPE_ID, IN_KEY1, IN_KEY2, IN_KEY3, IN_KEY4, IN_USER);
	END IF;
END
// DELIMITER ;
-- CALL CONTROL_ACCESS_DOC_FLOW_INSERT (1,1,"KEY1","KEY2","KEY3","KEY4", "USER1", @OUT_MSG);
-- SELECT * FROM DOC_FLOW;

DROP PROCEDURE IF EXISTS CONTROL_ACCESS_DOC_TYPE_INSERT;
DELIMITER //
CREATE PROCEDURE CONTROL_ACCESS_DOC_TYPE_INSERT(
	IN IN_TYPE_ID INT,
    IN IN_TYPE_CODE VARCHAR(100),
    
    IN IN_USER VARCHAR(100),
    OUT OUT_MSG VARCHAR(500)
)
BEGIN 
	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @SQL_STATUS = RETURNED_SQLSTATE, @ERR_MSG = MESSAGE_TEXT;
        SET OUT_MSG := CONCAT('ERROR -> ON [CONTROL_ACCESS_DOCAPPROVER_INSERT] ', @SQL_STATUS, ' - ', @ERR_MSG);
	END;
    
    SET OUT_MSG = 'OK';
    
    UPDATE DOC_TYPE SET
    TYPE_ID = IN_TYPE_ID, 
    TYPE_CODE = IN_TYPE_CODE,
    
    STATUS = 'ENABLED',
	UPDATED_ON = NOW(),
	UPDATED_BY = IN_USER
    
    WHERE
		TYPE_ID = IN_TYPE_ID;
    
    IF ROW_COUNT() = 0 THEN
		INSERT INTO DOC_TYPE (TYPE_ID, TYPE_CODE, CREATED_BY)
        VALUES (IN_TYPE_ID, IN_TYPE_CODE, IN_USER);
	END IF;
END
// DELIMITER ;

-- CALL CONTROL_ACCESS_DOC_TYPE_INSERT(1,"COD0123", "USER1", @OUT_MSG);
-- SELECT *FROM DOC_TYPE;

DROP PROCEDURE IF EXISTS CONTROL_ACCESS_DOCUMENT_INSERT;
DELIMITER //
CREATE PROCEDURE CONTROL_ACCESS_DOCUMENT_INSERT (
	IN IN_DOCUMENT_ID INT,
    IN IN_NAME VARCHAR(100),
    IN IN_TYPE_ID INT,
    
    IN IN_USER VARCHAR(100),
    OUT OUT_MSG VARCHAR(500)
)
BEGIN
	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @SQL_STATUS = RETURNED_SQLSTATE, @ERR_MSG = MESSAGE_TEXT;
        SET OUT_MSG := CONCAT('ERROR -> ON [CONTROL_ACCESS_DOCAPPROVER_INSERT] ', @SQL_STATUS, ' - ', @ERR_MSG);
	END;
    
    SET OUT_MSG = 'OK';
    
	UPDATE DOCUMENT SET
    DOCUMENT_ID = IN_DOCUMENT_ID,
    NAME = IN_NAME,
    TYPE_ID = IN_TYPE_ID,
    
    STATUS = 'ENABLED',
	UPDATED_ON = NOW(),
	UPDATED_BY = IN_USER
    
    WHERE 
		DOCUMENT_ID = IN_DOCUMENT_ID;
        
	IF ROW_COUNT() = 0 THEN
		INSERT INTO DOCUMENT(DOCUMENT_ID, NAME, TYPE_ID, CREATED_BY)
        VALUES (IN_DOCUMENT_ID, IN_NAME, IN_TYPE_ID, IN_USER);
	END IF;
END
// DELIMITER ;
-- CALL CONTROL_ACCESS_DOCUMENT_INSERT(1,"NOMBREGENERICO", 1, "USER1", @OUT_MSG);
-- SELECT * FROM DOCUMENT;