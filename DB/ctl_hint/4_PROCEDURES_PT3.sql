/* ############################# SET_API ############################### */
DROP PROCEDURE IF EXISTS SET_API;
DELIMITER //
CREATE PROCEDURE SET_API  (
	IN IN_API_ID INT,	
    IN IN_URL VARCHAR(450),
    IN IN_DESCRIPTION VARCHAR(300),
    IN IN_USER VARCHAR(50),
    OUT OUT_API_ID INT,
    OUT OUT_MSG VARCHAR(450)
) 
BEGIN 
	DECLARE VL_API_ID INT DEFAULT IN_API_ID;
    DECLARE CONTINUE HANDLER FOR NOT FOUND
	BEGIN
		SET VL_API_ID = NULL;
	END;
	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @SQL_STATUS = RETURNED_SQLSTATE, @ERR_MSG = MESSAGE_TEXT;    
		SET OUT_MSG := CONCAT('ERROR -> ON [SET_API] ',  @SQL_STATUS, ' - ', @ERR_MSG);
	END;    
    SET OUT_MSG = 'OK';	
    SET OUT_API_ID = IN_API_ID;
    
    IF VL_API_ID IS NULL THEN 
		SELECT API_ID INTO VL_API_ID 
		FROM CON_API WHERE URL_BASE = IN_URL;
        
        IF VL_API_ID IS NOT NULL THEN         
			SET IN_API_ID = VL_API_ID;
			SET OUT_API_ID = VL_API_ID;
		END IF;
    END IF;
    
	UPDATE CON_API SET 
		URL_BASE = IN_URL,
        DESCRIPTION = IN_DESCRIPTION,
        STATUS = 'ENABLED',
        UPDATED_ON = NOW(),
        UPDATED_BY = IN_USER
	WHERE 
		API_ID = IN_API_ID;
	
    IF ROW_COUNT() = 0 THEN 
		INSERT INTO CON_API (
			API_ID,
            URL_BASE,
            DESCRIPTION,
            CREATED_BY
		) VALUES (
			IN_API_ID,
            IN_URL,
            IN_DESCRIPTION,
            IN_USER
        );
        
        SET OUT_API_ID = LAST_INSERT_ID();
    END IF;
    
END //
DELIMITER ;
-- SET @MSG = '';
-- SET @API = 0;
-- CALL SET_API(4, 'http://test.como/api/v5/', 'TESTING PROCEDURE - returning value', 'TEST_API', @API, @MSG);
-- SELECT @MSG RESULT, @API API_ID;

/* ############################# SET_URL_ENDPOINT ############################### */
DROP PROCEDURE IF EXISTS SET_URL_ENDPOINT;
DELIMITER //
CREATE PROCEDURE SET_URL_ENDPOINT (
	IN IN_ENDPOINT_ID INT,	
    IN IN_ENDPOINT VARCHAR(450),    
    IN IN_TYPE VARCHAR(30),
    IN IN_API_ID INT,
    IN IN_USER VARCHAR(50),    
    OUT OUT_MSG VARCHAR(450)
) 
BEGIN	
	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @SQL_STATUS = RETURNED_SQLSTATE, @ERR_MSG = MESSAGE_TEXT;    
		SET OUT_MSG := CONCAT('ERROR -> ON [SET_URL_ENDPOINT] ',  @SQL_STATUS, ' - ', @ERR_MSG);
	END;    
    SET OUT_MSG = 'OK';
    
	UPDATE CON_URL_ENDPOINT SET 
		ENDPOINT = IN_ENDPOINT,
        REQUEST_TYPE = IN_TYPE,
        API_ID = IN_API_ID,
        STATUS = 'ENABLED',
        UPDATED_ON = NOW(),
        UPDATED_BY = IN_USER
	WHERE 
		ENDPOINT_ID = IN_ENDPOINT_ID;
	
    IF ROW_COUNT() = 0 THEN 
		INSERT INTO CON_URL_ENDPOINT (
			ENDPOINT_ID,
            ENDPOINT,
            REQUEST_TYPE,
            API_ID,
            CREATED_BY
		) VALUES (
			IN_ENDPOINT_ID,
            IN_ENDPOINT,
            IN_TYPE,
            IN_API_ID,
            IN_USER
        );			
    END IF;
    
END //
DELIMITER ;
-- SET @MSG = '';
-- CALL SET_URL_ENDPOINT(2, 'TEST/V1', 'GET', 1, 'TEST_API', @MSG);
-- SELECT @MSG RESULT;

/* ############################# SET_ENDPOINT_PARAMETER ############################### */
DROP PROCEDURE IF EXISTS SET_ENDPOINT_PARAMETER;
DELIMITER //
CREATE PROCEDURE SET_ENDPOINT_PARAMETER (
	IN IN_PARAMETER_ID INT,	
    IN IN_PARAMETER VARCHAR(450),
    IN IN_TYPE VARCHAR(30),
    IN IN_REQUIRED BOOL,
    IN IN_DESCRIPTION VARCHAR(300),
    IN IN_ENDPOINT_ID INT,    
    IN IN_USER VARCHAR(50),    
    OUT OUT_MSG VARCHAR(450)
) 
BEGIN	
	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @SQL_STATUS = RETURNED_SQLSTATE, @ERR_MSG = MESSAGE_TEXT;    
		SET OUT_MSG := CONCAT('ERROR -> ON [SET_ENDPOINT_PARAMETER] ',  @SQL_STATUS, ' - ', @ERR_MSG);
	END;    
    SET OUT_MSG = 'OK';
    
	UPDATE CON_ENDPOINT_PARAMETER SET 		
        PARAMETER = IN_PARAMETER,
        TYPE = UPPER(IN_TYPE),
        IS_REQUIRED = IN_REQUIRED,
        DESCRIPTION = IN_DESCRIPTION,
        ENDPOINT_ID = IN_ENDPOINT_ID,
        STATUS = 'ENABLED',
        UPDATED_ON = NOW(),
        UPDATED_BY = IN_USER
	WHERE 
		PARAMETER_ID = IN_PARAMETER_ID;
	
    IF ROW_COUNT() = 0 THEN 
		INSERT INTO CON_ENDPOINT_PARAMETER (
			PARAMETER_ID,
            PARAMETER,
            TYPE,
            IS_REQUIRED,
            DESCRIPTION,
            ENDPOINT_ID,
            CREATED_BY
		) VALUES (
			IN_PARAMETER_ID,
            IN_PARAMETER,
            UPPER(IN_TYPE),
            IN_REQUIRED,
            IN_DESCRIPTION,
            IN_ENDPOINT_ID,
            IN_USER
        );			
    END IF;
    
END //
DELIMITER ;

-- SET @MSG = '';
-- CALL SET_ENDPOINT_PARAMETER(
-- 	1, 
--     'crazy_p1', 
--     'url', 
--     true, 
--     'Crazy param for crazy testing', 
--     1, 
--     'TEST_API', 
--     @MSG
-- );
-- SELECT @MSG RESULT;

/* ############################# SET_FLOW_DETAIL ############################### */
DROP PROCEDURE IF EXISTS SET_FLOW_DETAIL;
DELIMITER //
CREATE PROCEDURE SET_FLOW_DETAIL (
	IN IN_FLOW_DET_ID INT,	
    IN IN_SEQUENCE INT,
    IN IN_REQUIRED BOOL,
    IN IN_DESCRIPTION VARCHAR(450),
    IN IN_ENDPOINT_ID INT,
    IN IN_FLOW_ID INT,
    IN IN_USER VARCHAR(50),    
    OUT OUT_MSG VARCHAR(450)
) 
BEGIN	
	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @SQL_STATUS = RETURNED_SQLSTATE, @ERR_MSG = MESSAGE_TEXT;    
		SET OUT_MSG := CONCAT('ERROR -> ON [SET_FLOW_DETAIL] ',  @SQL_STATUS, ' - ', @ERR_MSG);
	END;    
    SET OUT_MSG = 'OK';
    
	UPDATE FLOW_DETAIL SET 		        
        SEQUENCE = IN_SEQUENCE,
        FLOW_ID = IN_FLOW_ID,
        IS_REQUIRED = IN_REQUIRED,
        DESCRIPTION = IN_DESCRIPTION,
        ENDPOINT_ID = IN_ENDPOINT_ID,
        STATUS = 'ENABLED',
        UPDATED_ON = NOW(),
        UPDATED_BY = IN_USER
	WHERE 
		FLOW_DET_ID = IN_FLOW_DET_ID;
	
    IF ROW_COUNT() = 0 THEN 
		INSERT INTO FLOW_DETAIL (
			FLOW_DET_ID,
            SEQUENCE,            
            IS_REQUIRED,
            DESCRIPTION,
            ENDPOINT_ID,
            FLOW_ID,
            CREATED_BY
		) VALUES (
			IN_FLOW_DET_ID,
            IN_SEQUENCE,            
            IN_REQUIRED,
            IN_DESCRIPTION,
            IN_ENDPOINT_ID,
            IN_FLOW_ID,
            IN_USER
        );			
    END IF;
    
END //
DELIMITER ;

-- SET @MSG = '';
-- CALL SET_FLOW_DETAIL(
-- 	1, 
--     1, 
--     TRUE,     
--     'DETAIL IN FLOW', 
--     1,
-- 	1,
--     'TEST_API', 
--     @MSG
-- );
-- SELECT @MSG RESULT;

/* ############################# SET_HINT_CONFIG ############################### */
DROP PROCEDURE IF EXISTS SET_HINT_CONFIG;
DELIMITER //
CREATE PROCEDURE SET_HINT_CONFIG (
	IN IN_DEVICE_ID INT,	
    IN IN_EMPLOYEE_ID INT,
    IN IN_HINT_KEY INT,
    IN IN_USER VARCHAR(50),    
    OUT OUT_MSG VARCHAR(450)
) 
BEGIN	
	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @SQL_STATUS = RETURNED_SQLSTATE, @ERR_MSG = MESSAGE_TEXT;    
		SET OUT_MSG := CONCAT('ERROR -> ON [SET_HINT_CONFIG] ',  @SQL_STATUS, ' - ', @ERR_MSG);
	END;    
    SET OUT_MSG = 'OK';
    
	UPDATE DEV_HINT_CONFIG SET 		        
        HINT_KEY_ID = IN_HINT_KEY,
        STATUS = 'ENABLED',
        UPDATED_ON = NOW(),
        UPDATED_BY = IN_USER
	WHERE 
		DEVICE_ID = IN_DEVICE_ID
	AND EMPLOYEE_ID = IN_EMPLOYEE_ID;
	
    IF ROW_COUNT() = 0 THEN 
		INSERT INTO DEV_HINT_CONFIG (
			DEVICE_ID,
            HINT_KEY_ID,
            EMPLOYEE_ID,
            CREATED_BY
		) VALUES (
			IN_DEVICE_ID,
            IN_HINT_KEY,
            IN_EMPLOYEE_ID,
            IN_USER
        );			
    END IF;
    
END //
DELIMITER ;

-- SET @MSG = '';
-- CALL SET_HINT_CONFIG(
-- 	1, 
-- 	1, 
-- 	1001,
--  'TEST_API', 
--  @MSG
-- );
-- SELECT @MSG RESULT;

/* ############################# SET_DEV_FLOW ############################### */
DROP PROCEDURE IF EXISTS SET_DEV_FLOW;
DELIMITER //
CREATE PROCEDURE SET_DEV_FLOW (
	IN IN_DEVICE_ID INT,	
    IN IN_FLOW_ID INT,
    IN IN_USER VARCHAR(50),    
    OUT OUT_MSG VARCHAR(450)
) 
BEGIN	
	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @SQL_STATUS = RETURNED_SQLSTATE, @ERR_MSG = MESSAGE_TEXT;    
		SET OUT_MSG := CONCAT('ERROR -> ON [SET_DEV_FLOW] ',  @SQL_STATUS, ' - ', @ERR_MSG);
	END;    
    SET OUT_MSG = 'OK';
    
	UPDATE DEV_FLOW SET 		        
        FLOW_ID = IN_FLOW_ID,
        LAST_UPDATE = NOW(),
        STATUS = 'ENABLED',
        UPDATED_ON = NOW(),
        UPDATED_BY = IN_USER
	WHERE 
		DEVICE_ID = IN_DEVICE_ID;
	
    IF ROW_COUNT() = 0 THEN 
		INSERT INTO DEV_FLOW (
			DEVICE_ID,
            FLOW_ID,
            LAST_UPDATE,
            CREATED_BY
		) VALUES (
			IN_DEVICE_ID,
            IN_FLOW_ID,
            NOW(),
            IN_USER
        );			
    END IF;
    
END //
DELIMITER ;

-- SET @MSG = '';
-- CALL SET_DEV_FLOW(
-- 	2, 
-- 	1, 
--  'TEST_API', 
--  @MSG
-- );
-- SELECT @MSG;
