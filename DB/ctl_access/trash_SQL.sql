/*######################### VERIFY EMPLOYEE ACCESS LEVEL ##############################*/
DROP FUNCTION IF EXISTS VERIFY_ACCESS;
DELIMITER //
CREATE FUNCTION VERIFY_ACCESS (
	IN_EMPLOYEE INT,
    IN_DEVICE INT
) RETURNS BOOL
DETERMINISTIC
BEGIN 
	DECLARE VL_RESULT VARCHAR(500) DEFAULT 'OK';
    DECLARE VL_ACCESS_LEVEL INT DEFAULT 0;
    DECLARE VL_DEV_ACCESS INT DEFAULT 0;
	DECLARE VL_IS_VALID INT DEFAULT FALSE;
    DECLARE IS_END INT DEFAULT FALSE;
    DECLARE C_ACCESS CURSOR FOR (
		SELECT 			
			EAL.ACCESS_LEVEL_ID		
		FROM 
			EMPLOYEE_ACCESS_LEVEL EAL, ACCESS_LEVEL AL
		WHERE 
			EAL.ACCESS_LEVEL_ID = AL.ACCESS_LEVEL_ID
		AND	EAL.STATUS = 'ENABLED'
		AND	EAL.EMPLOYEE_ID = IN_EMPLOYEE
	);
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET IS_END = TRUE;    
	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION 
    BEGIN 
		SET VL_IS_VALID = FALSE;
    END;	
    
    SELECT ACCESS_LEVEL_ID INTO VL_DEV_ACCESS FROM DEVICE WHERE DEVICE_ID = IN_DEVICE;
    
	OPEN C_ACCESS;
	ACC_LOOP: LOOP
		FETCH C_ACCESS INTO VL_ACCESS_LEVEL;
        
		IF IS_END THEN 
			LEAVE ACC_LOOP;
		END IF;
        
		IF VL_ACCESS_LEVEL = VL_DEV_ACCESS THEN 
			SET VL_IS_VALID = TRUE;
        END IF;
        
	END LOOP ACC_LOOP;
	CLOSE C_ACCESS;
    
    RETURN VL_IS_VALID;
END //
DELIMITER ;


	SELECT 
		EH.HINT_ID,
        EH.HINT_NAME,
        EH.LAST_UPDATE,
        EH.EXTENSION_IMG,
        EH.HINT_IMG,
        CONCAT(EH.HINT_NAME,'.',LOWER(EH.EXTENSION_IMG)) FULL_NAME,
        E.EMPLOYEE_ID,
        E.FIRST_NAME,
        E.LAST_NAME
	FROM 
		EMPLOYEE_HINT EH JOIN EMPLOYEE E ON EH.EMPLOYEE_ID = E.EMPLOYEE_ID
	WHERE 
		EH.HINT_ID = IFNULL(NULL, EH.HINT_ID)
	AND E.EMPLOYEE_ID = IFNULL(NULL, E.EMPLOYEE_ID);